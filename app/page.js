import Head from 'next/head'
import Link from 'next/link';

// const Item = styled(Paper)(({ theme }) => ({
//     backgroundColor: theme.palette
//         .mode === "dark" ? "#1A2027" : "#fff",
    
//     padding: theme.spacing(5),
//     textAlign: "center",
//     color: theme.palette.text.secondary,
//     fontWeight: 'bolder',
//}));

// Static data fetching with revalidation.
async function fetchSessions() {
  const response = await fetch(
    "https://conferenceapi.azurewebsites.net/sessions",
    { next: {revalidate: 60} }
  );

  const data = await response.json();
  return data;
}

// Static data fetching with revalidation.
async function fetchSpeakers() {
  const response = await fetch(
    "https://conferenceapi.azurewebsites.net/speakers",
    { next: {revalidate: 60} }
  );

  const data = await response.json();
  return data;
}

// Static data fetching with revalidation.
async function fetchTopics() {
  const response = await fetch(
    "https://conferenceapi.azurewebsites.net/topics",
    { next: {revalidate: 60} }
  );

  const data = await response.json();
  return data;
}

async function Home () {
    const sessions = await fetchSessions();
    //console.log(sessions.collection.items.length);
    const speakers = await fetchSpeakers();
    //console.log(speakers.collection.items.length);
    const topics = await fetchTopics();
    //console.log(topics.collection.items.length);

    return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <div>Sessions: {sessions.collection.items.length}</div>
      <div>Speakers: {speakers.collection.items.length}</div>
      <div>Topics: {topics.collection.items.length}</div> */}
       {/* Three columns  */}
        
      {/* <div class="px-2">
        <div class="flex mx-2 my-2 items-center">
          <div class="w-1/3 px-2">
            <div class="bg-blue-50 h-12">
              Sessions: {sessions.collection.items.length}
            </div>
          </div>
          <div class="w-1/3 px-2">
            <div class="bg-red-50 h-12">
              Speakers: {speakers.collection.items.length}
            </div>
          </div>
          <div class="w-1/3 px-2">
            <div class="bg-purple-50 h-12">
              Topics: {topics.collection.items.length}
            </div>
          </div>
        </div>
      </div> */}
      <div class="flex my-16">
        <div class="flex flex-col bg-black text-white opacity-70 h-48 w-1/3 mx-14 items-center justify-center rounded-md shadow-2xl m-auto">
          <div>
            <div class="text-3xl">Sessions</div>
          </div>
          <div>
            <span class="text-6xl">{sessions.collection.items.length}</span>
          </div>
        </div>
        <div class="flex flex-col bg-black text-white opacity-70 h-48 w-1/3 mx-14 items-center justify-center rounded-md shadow-2xl">
          <div>
            <div class="text-3xl">Speakers</div>
          </div>
          <div>
            <span class="text-6xl">{speakers.collection.items.length}</span>
          </div>
        </div>
        <div class="flex flex-col bg-black text-white opacity-70 h-48 w-1/3 mx-14 items-center justify-center rounded-md shadow-2xl">
          <div>
            <div  class="text-3xl">Topics</div>
          </div>
          <div>
            <span class="text-6xl">{topics.collection.items.length}</span>
          </div>
        </div>
      </div>
      
      {/* <ThemeProvider theme={theme}>
      <Container maxWidth="xs">
        <Paper sx={{ my: 4 }}>
        <Grid container>
          <Grid item md={12}>
            <Box
              sx={{
                position: 'relative',
                p: { xs: 3, md: 6 },
                pr: { md: 0 },
              }}
            >
              <Typography component="h1" variant="h3" color="inherit" gutterBottom>
                post.title
              </Typography>
              <Typography variant="h5" color="inherit" paragraph>
                post.description
              </Typography>
              <Link variant="subtitle1" href="#">
                post.linkText
              </Link>
            </Box>
          </Grid>
        </Grid>
        </Paper>
        <Stack direction="row" spacing={5}>
              <Item>
                <Typography variant="h5" color="inherit">
                  Item 1
                </Typography>
              </Item>
              <Item>
                <Typography component="h1" variant="h3" color="inherit" gutterBottom>
                  post.title
                </Typography>
                <Typography variant="h5" color="inherit" paragraph>
                  post.description
                </Typography>
                <Link variant="subtitle1" href="#">
                  post.linkText
                </Link>
              </Item>
              <Item>Item 3</Item>
            </Stack>
      </Container>
      </ThemeProvider> */}
    </>
  )
}

// // This function gets called at build time on server-side.
// // It may be called again, on a serverless function, if
// // revalidation is enabled and a new request comes in
// export async function getServerSideProps(context) {
//   console.log('Going inside...')
//   const sessionResponse = await fetch('https://conferenceapi.azurewebsites.net/sessions')
//   const sessions = await sessionResponse.json()
//   console.log(sessions);

//   const speakersResponse = await fetch('https://conferenceapi.azurewebsites.net/speakers')
//   const speakers = await speakersResponse.json()

//   const topicsResponse = await fetch('https://conferenceapi.azurewebsites.net/topics')
//   const topics = await topicsResponse.json()

//   return {
//     props: {
//       sessions,
//       speakers,
//       topics,
//     },
//     // Next.js will attempt to re-generate the page:
//     // - When a request comes in
//     // - At most once every 60 seconds
//     revalidate: 60, // In seconds
//   }
// }

export default Home;